name: λ Core Purity Proofs

on:
  push:
    branches: [master, main, endgame]
  pull_request:
    branches: [master, main, endgame]

jobs:
  prove-purity:
    name: Prove λ-core is PURE
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: 📦 Install TypeScript
        run: npm install -g typescript ts-node @types/node
      
      - name: 🧪 Test Church Encodings
        run: |
          echo "=== Testing Church Encodings ==="
          cd core
          npx ts-node lambda-pure.test.ts
      
      - name: 🛡️ Test Type Guards
        run: |
          echo "=== Testing Type Guards ==="
          cd core
          npx ts-node -e "
            import { TypeChecker, wrapNum, wrapBool } from './types';
            const checker = new TypeChecker();
            
            // This should fail
            const num = wrapNum(() => 0);
            const bool = wrapBool(() => true);
            
            if (checker.checkArithmetic('PLUS', num, bool)) {
              console.error('❌ Type guard failed - allowed PLUS TRUE 0');
              process.exit(1);
            }
            
            console.log('✅ Type guards prevent (+ TRUE 0)');
          "
      
      - name: 🔄 Test Transpilation
        run: |
          echo "=== Testing Transpilation ==="
          cd transpile
          npx ts-node -e "
            import { desugar, prettyPrint } from './desugar';
            
            // Test let elimination
            const letExpr = {
              type: 'let',
              name: 'x',
              value: { type: 'num', value: 5 },
              body: { type: 'var', name: 'x' }
            };
            
            const result = desugar(letExpr);
            const pretty = prettyPrint(result);
            
            if (!pretty.includes('λx')) {
              console.error('❌ let not transpiled to λ');
              process.exit(1);
            }
            
            console.log('✅ let → λ transpilation works');
            console.log('   ', pretty);
          "
      
      - name: 📐 Prove Beta Equivalence
        run: |
          echo "=== Proving Beta Equivalence ==="
          cd core
          npx ts-node -e "
            // S K K = I
            const S = (x) => (y) => (z) => x(z)(y(z));
            const K = (x) => (y) => x;
            const I = (x) => x;
            
            const SKK = S(K)(K);
            const test = 42;
            
            if (SKK(test) !== I(test)) {
              console.error('❌ S K K ≠ I');
              process.exit(1);
            }
            
            console.log('✅ S K K = I proven');
          "
      
      - name: 🔢 Prove Church Arithmetic
        run: |
          echo "=== Proving Church Arithmetic ==="
          cd core
          npx ts-node -e "
            import { ZERO, ONE, TWO, THREE, PLUS, MULT, toNumber } from './lambda-pure';
            
            // 2 + 3 = 5
            const five = PLUS(TWO)(THREE);
            if (toNumber(five) !== 5) {
              console.error('❌ 2 + 3 ≠ 5');
              process.exit(1);
            }
            
            // 2 * 3 = 6
            const six = MULT(TWO)(THREE);
            if (toNumber(six) !== 6) {
              console.error('❌ 2 * 3 ≠ 6');
              process.exit(1);
            }
            
            console.log('✅ Church arithmetic proven');
          "
      
      - name: 🔁 Test Y Combinator
        run: |
          echo "=== Testing Y Combinator ==="
          cd core
          npx ts-node -e "
            import { Y, ZERO, ONE, TWO, THREE, MULT, PRED, IS_ZERO, toNumber, toBoolean } from './lambda-pure';
            
            // Factorial using Y
            const fact = Y((f) => (n) => 
              toBoolean(IS_ZERO(n)) 
                ? ONE 
                : MULT(n)(f(PRED(n)))
            );
            
            if (toNumber(fact(THREE)) !== 6) {
              console.error('❌ factorial(3) ≠ 6');
              process.exit(1);
            }
            
            console.log('✅ Y combinator works');
          "
      
      - name: 📊 Generate Purity Report
        run: |
          echo "=== λ-Core Purity Report ===" > purity-report.txt
          echo "" >> purity-report.txt
          echo "✅ Church Encodings: PURE" >> purity-report.txt
          echo "✅ Type Guards: ACTIVE (no + TRUE 0)" >> purity-report.txt
          echo "✅ Transpilation: let/const → λ" >> purity-report.txt
          echo "✅ Beta Equivalence: PROVEN" >> purity-report.txt
          echo "✅ Y Combinator: FUNCTIONAL" >> purity-report.txt
          echo "" >> purity-report.txt
          echo "Core is mathematically PURE." >> purity-report.txt
          
          cat purity-report.txt
      
      - name: 📤 Upload Proof Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: purity-proofs
          path: purity-report.txt
          retention-days: 30
      
      - name: 🏷️ Update README Badge
        if: success() && github.ref == 'refs/heads/master'
        run: |
          echo "Would update badge: λ-core purity: PASS"