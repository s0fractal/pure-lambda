name: 🧬 Organism Release

on:
  push:
    tags:
      - 'organism/*/v*'
  workflow_dispatch:
    inputs:
      organism:
        description: 'Organism name'
        required: true
        default: 'core'
      version:
        description: 'Version'
        required: true
        default: '0.1.0'

jobs:
  release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write
      id-token: write  # For sigstore
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔍 Parse release info
        id: parse
        run: |
          if [[ "${{ github.ref }}" == refs/tags/organism/* ]]; then
            # Extract from tag: organism/core/v0.1.0
            TAG="${{ github.ref_name }}"
            ORGANISM=$(echo $TAG | cut -d'/' -f2)
            VERSION=$(echo $TAG | cut -d'/' -f3 | sed 's/^v//')
          else
            # Use workflow inputs
            ORGANISM="${{ github.event.inputs.organism }}"
            VERSION="${{ github.event.inputs.version }}"
          fi
          
          echo "organism=$ORGANISM" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Releasing: $ORGANISM v$VERSION"
      
      - name: 🔧 Setup build environment
        run: |
          # Node.js
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          npm install -g typescript ts-node @iarna/toml
          
          # Python
          sudo apt-get install -y python3 python3-pip python3-venv
          pip3 install build twine
          
          # Rust
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup target add wasm32-unknown-unknown
          cargo install wasm-pack
      
      - name: 🧬 Build organism
        id: build
        run: |
          ORGANISM="${{ steps.parse.outputs.organism }}"
          VERSION="${{ steps.parse.outputs.version }}"
          
          echo "Building $ORGANISM v$VERSION..."
          
          # Make organism for all targets
          chmod +x organism-cli.js
          ./organism-cli.js make $ORGANISM --targets=ts,py,rs,wasm
          
          # Compute soulset
          SOULSET=$(./organism-cli.js soulset $ORGANISM)
          echo "soulset=$SOULSET" >> $GITHUB_OUTPUT
          
          # Update version with soulset
          VERSION_FULL="${VERSION}+${SOULSET}"
          echo "version_full=$VERSION_FULL" >> $GITHUB_OUTPUT
      
      - name: 🧪 Test organism
        run: |
          ORGANISM="${{ steps.parse.outputs.organism }}"
          
          ./organism-cli.js test $ORGANISM
          
          # Run property tests
          echo "Running property tests..."
          for gene in $(cat organisms/$ORGANISM/organism.toml | grep -A 20 '\[genes\]' | grep '"' | cut -d'"' -f2); do
            echo "  Testing $gene..."
            # Would run actual tests here
          done
      
      - name: 📦 Package organism
        run: |
          ORGANISM="${{ steps.parse.outputs.organism }}"
          VERSION="${{ steps.parse.outputs.version }}"
          
          # Create packages for each target
          ./organism-cli.js pack $ORGANISM --format=tar
          ./organism-cli.js pack $ORGANISM --format=oci
          
          # List artifacts
          ls -la dist/packed/
      
      - name: 🔏 Generate attestations
        id: attest
        run: |
          ORGANISM="${{ steps.parse.outputs.organism }}"
          SOULSET="${{ steps.build.outputs.soulset }}"
          
          # Create attestation document
          cat > attestation.json << EOF
          {
            "version": "1.0",
            "type": "organism-release",
            "organism": "$ORGANISM",
            "soulset": "$SOULSET",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "repository": "${{ github.repository }}",
            "commit": "${{ github.sha }}",
            "genes": $(cat organisms/$ORGANISM/organism.toml | grep -A 20 '\[genes\]' | grep '"' | jq -R -s -c 'split("\n") | map(select(. != ""))')
          }
          EOF
          
          echo "Attestation created"
      
      - name: 📤 Publish TypeScript
        if: success()
        run: |
          ORGANISM="${{ steps.parse.outputs.organism }}"
          VERSION_FULL="${{ steps.build.outputs.version_full }}"
          
          cd dist/ts
          
          # Update package.json with soulset
          node -e "
            const pkg = require('./package.json');
            pkg.version = '$VERSION_FULL'.split('+')[0];
            pkg.metadata.soulset = '${{ steps.build.outputs.soulset }}';
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          
          # Publish to npm (dry-run for now)
          npm pack
          echo "Would publish to npm: $(ls *.tgz)"
          # npm publish --access public
      
      - name: 🐍 Publish Python
        if: success()
        run: |
          ORGANISM="${{ steps.parse.outputs.organism }}"
          
          cd dist/py
          
          # Build Python package
          python3 -m build
          
          echo "Would publish to PyPI: $(ls dist/*.whl)"
          # twine upload dist/*
      
      - name: 🦀 Publish Rust
        if: success()
        run: |
          ORGANISM="${{ steps.parse.outputs.organism }}"
          
          cd dist/rs
          
          # Update Cargo.toml with soulset
          echo "[package.metadata.soulset]" >> Cargo.toml
          echo "value = \"${{ steps.build.outputs.soulset }}\"" >> Cargo.toml
          
          echo "Would publish to crates.io"
          # cargo publish
      
      - name: 🌐 Publish WASM
        if: success()
        run: |
          ORGANISM="${{ steps.parse.outputs.organism }}"
          
          echo "WASM artifacts:"
          ls -la dist/wasm/
          
          # Would publish to WASM registry
      
      - name: 📝 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "organism/${{ steps.parse.outputs.organism }}/v${{ steps.parse.outputs.version }}"
          name: "${{ steps.parse.outputs.organism }} v${{ steps.parse.outputs.version }}"
          body: |
            ## 🧬 Organism Release: ${{ steps.parse.outputs.organism }}
            
            **Version:** ${{ steps.build.outputs.version_full }}
            **Soulset:** ${{ steps.build.outputs.soulset }}
            
            ### Included Genes
            $(cat organisms/${{ steps.parse.outputs.organism }}/organism.toml | grep -A 20 '\[genes\]' | grep '"' | sed 's/^/- /')
            
            ### Available Targets
            - 📦 TypeScript: `@s0fractal/pure-lambda-${{ steps.parse.outputs.organism }}`
            - 🐍 Python: `pure-lambda-${{ steps.parse.outputs.organism }}`
            - 🦀 Rust: `pure-lambda-${{ steps.parse.outputs.organism }}`
            - 🌐 WASM: `pure-lambda-${{ steps.parse.outputs.organism }}.wasm`
            
            ### Installation
            
            **TypeScript/Node.js:**
            ```bash
            npm install @s0fractal/pure-lambda-${{ steps.parse.outputs.organism }}
            ```
            
            **Python:**
            ```bash
            pip install pure-lambda-${{ steps.parse.outputs.organism }}
            ```
            
            **Rust:**
            ```toml
            pure-lambda-${{ steps.parse.outputs.organism }} = "${{ steps.parse.outputs.version }}"
            ```
            
            ### Verification
            
            All manifestations share the same soulset: `${{ steps.build.outputs.soulset }}`
            
            This guarantees semantic equivalence across all languages.
          files: |
            dist/packed/*.tar
            dist/packed/*.oci
            attestation.json
      
      - name: 🔐 Sign with Sigstore
        if: success()
        run: |
          # Install cosign
          curl -Lo cosign https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
          chmod +x cosign
          
          # Sign attestation
          ./cosign sign-blob \
            --yes \
            --oidc-issuer https://token.actions.githubusercontent.com \
            --bundle attestation.bundle \
            attestation.json
          
          echo "Attestation signed with Sigstore"
      
      - name: 📊 Update registry
        run: |
          ORGANISM="${{ steps.parse.outputs.organism }}"
          VERSION="${{ steps.parse.outputs.version }}"
          SOULSET="${{ steps.build.outputs.soulset }}"
          
          # Update registry index
          node -e "
            const fs = require('fs');
            const registry = JSON.parse(fs.readFileSync('registry/index.json'));
            
            // Find or create organism entry
            let org = registry.organisms?.find(o => o.name === '$ORGANISM');
            if (!org) {
              org = { name: '$ORGANISM', versions: [] };
              registry.organisms = registry.organisms || [];
              registry.organisms.push(org);
            }
            
            // Add version
            org.versions.push({
              version: '$VERSION',
              soulset: '$SOULSET',
              released: new Date().toISOString(),
              targets: ['ts', 'py', 'rs', 'wasm']
            });
            
            fs.writeFileSync('registry/index.json', JSON.stringify(registry, null, 2));
          "
          
          # Commit registry update
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add registry/index.json
          git commit -m "Update registry: $ORGANISM v$VERSION" || true
          git push origin HEAD:${{ github.ref_name }} || true
      
      - name: 🎉 Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Organism:** ${{ steps.parse.outputs.organism }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.build.outputs.version_full }}" >> $GITHUB_STEP_SUMMARY
          echo "**Soulset:** ${{ steps.build.outputs.soulset }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Published Packages" >> $GITHUB_STEP_SUMMARY
          echo "- NPM: @s0fractal/pure-lambda-${{ steps.parse.outputs.organism }}" >> $GITHUB_STEP_SUMMARY
          echo "- PyPI: pure-lambda-${{ steps.parse.outputs.organism }}" >> $GITHUB_STEP_SUMMARY
          echo "- Crates.io: pure-lambda-${{ steps.parse.outputs.organism }}" >> $GITHUB_STEP_SUMMARY
          echo "- WASM: Available as artifact" >> $GITHUB_STEP_SUMMARY